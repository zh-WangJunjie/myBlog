<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我的学历</title>
    <url>/2019/07/03/%E6%88%91%E7%9A%84%E5%AD%A6%E5%8E%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://guli-wjj.oss-cn-shenzhen.aliyuncs.com/project/%E6%88%91%E7%9A%84%E5%AD%A6%E7%B1%8D%E4%BF%A1%E6%81%AF.png" alt="学信网截图"></p>
]]></content>
      <categories>
        <category>学历</category>
      </categories>
      <tags>
        <tag>学历信息</tag>
      </tags>
  </entry>
  <entry>
    <title>AC模玩项目</title>
    <url>/2018/01/03/AC%E6%A8%A1%E7%8E%A9%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>一个电商平台</p>
<a id="more"></a>

<!-- 
&nbsp;//半角空格（英文）
&emsp;//全角空格（中文） 
-->
<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><blockquote>
<p>&emsp;&emsp;AC模玩是中文世界大的动漫周边模型玩具网,也是大的模型玩具爱好者网络聚集地和大的玩具交易交流平台,以变形金刚玩具交易为基础逐步发展为包含圣斗士等在内的包含各类主流模型玩具的综合模玩网站。</p>
</blockquote>
<h2 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h2><ol>
<li>后台管理服务模块</li>
<li>模玩搜索服务模块</li>
<li>模玩详情服务模块</li>
<li>购物车服务模块</li>
<li>单点登录服务模块</li>
<li>订单服务模块</li>
<li>支付服务模块</li>
<li>会员服务模块</li>
<li>common模块</li>
</ol>
<hr>
<p><img src="https://guli-wjj.oss-cn-shenzhen.aliyuncs.com/project/%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="项目架构图.png"></p>
<h2 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h2><p>&emsp;&emsp;Windows、IDEA、MySQL、ElasticSearch、Linux、Postman、Redis、Nginx、SSM、Dubbo、Zookeeper、FastDFS、SpringBoot、支付宝开放平台、阿里云、OSS、ActiveMq</p>
<h2 id="各模块简介"><a href="#各模块简介" class="headerlink" title="各模块简介"></a>各模块简介</h2><ul>
<li><p>后台管理服务模块</p>
<blockquote>
<p>&emsp;&emsp;后台管理的页面是由node.js搭建的，前端同事根据《开发文档-接口制定细则与规范》提供接口给后端，后端按照提供的接口进行开发。<br>&emsp;&emsp;该模块提供了模玩商品的定义、管理服务，以及模玩商品审核、上架、下架服务等，管理了模玩商品的PMS等。如模玩商品的商品名称、id、描述、价格、一级分类、二级分类、三级分类等。该模块仅对后台管理人员或商家相关管理人员开放。<br>&emsp;&emsp;功能列表（部分）：</p>
<table border="1">
  <!-- 标题行 -->
  <tr>
      <th>序号</th>
      <th>功能</th>
  </tr>
  <!-- 内容行 -->
  <tr>
      <th>1</th>
      <th>三级分类的查询</th>
  </tr>
  <tr>
      <th>2</th>
      <th>商品的平台属性列表的增删改查</th>
  </tr>
  <tr>
      <th>3</th>
      <th>商品spu的添加、spu列表查询、spu的销售属性、属性值、Fastdfs图片上传</th>
  </tr>
  <tr>
      <th>4</th>
      <th>商品sku的添加</th>
  </tr>
  <tr>
      <th>5</th>
      <th>sku信息、sku关联的销售属性、sku关联的平台属性、sku图片</th>
  </tr>
</blockquote>
</table>
&emsp;&emsp;技术点：
用到了FastDFS作为静态资源服务器并整合了Nginx，对模玩的图片等静态资源进行存储。
</li>
<li><p>模玩搜索服务模块</p>
<blockquote>
<p>&emsp;&emsp;先谈谈我为什么要用搜索引擎。如果用传统方法进行搜索，有如下几个弊端：<br>&emsp;&emsp;1、对于传统的关系型数据库对于关键词的查询，只能逐字逐行的匹配，性能非常差；<br>&emsp;&emsp;2、匹配方式不合理，比如搜索“机动高达” ，如果用like进行匹配， 根本匹配不到。但是考虑使用者的用户体验的话，除了完全匹配的记录，还应该显示一部分近似匹配的记录，至少应该匹配到“高达”。<br>&emsp;&emsp;所以综合考虑，选用搜索引擎可以很好的解决这几个问题。<br>&emsp;&emsp;该模块选用了ElasticSearch作为搜索引擎，kibana作为客户端管理操作ElasticSearch，并且使用IKAnalyzer中文分词器对模玩商品信息进行分词。搜索业务功能：<br>&emsp;&emsp;1、使用JestClient作为java客户端，将数据库中商品信息放到ElasticSearch服务器；<br>&emsp;&emsp;2、从前台获取到的关键词或者平台属性id进行处理，拼接成一个query语句，使用JestClient完成查询；<br>&emsp;&emsp;3、如果商家对商品信息进行了添加或者更改删除，则使用消息队列进行监听，如果监听到变更信息就消费该信息并进行更新操作。<br>&emsp;&emsp;而且搜索业务可以通过两种方式进行触发，第一种是用户在搜索栏输入关键字，然后后台完成该业务并且将关键字显示为高亮状态。第二种是用户在平台属性上点击，后台进行筛选后展示给用户。<br>&emsp;&emsp;技术点：<br>&emsp;&emsp;ElasticSearch搜索引擎、Kibana客户端、IKAnalyzer中文分词器、ActiveMq</p>
</blockquote>
</li>
<li><p>模玩详情服务模块</p>
<blockquote>
<p>&emsp;&emsp;模玩详情服务主要是将数据库里的模玩信息展示给用户，经过几次修改，产生了如下几种方案：<br>&emsp;&emsp;方案一：直接去数据库里面查，如果用户在页面上点个不停，造成大量的请求，这种方案就会对数据库造成压力，所以直接淘汰；<br>&emsp;&emsp;方案二：先将模玩详情信息从数据库中取出来存储在redis中，用户点击了模玩详情就去redis里面取，这样有效减轻了数据库的压力；<br>&emsp;&emsp;方案三：把模玩详情从数据库中取出来，封装成一个hash表，静态化成一个json文件，存储在用户磁盘中，再通过Thymeleaf进行页面渲染；<br>&emsp;&emsp;几经思虑，最终采用了方案三，业务流程如下：<br>&emsp;&emsp;1、调用模玩管理服务将模玩详情信息取出来；<br>&emsp;&emsp;2、将模玩信息静态化成一个json文件；<br>&emsp;&emsp;3、使用Thymeleaf进行页面渲染；<br>&emsp;&emsp;4、为了保证商品信息的有效性，设置每隔一段时间更新一次json文件。<br>&emsp;&emsp;这样做有效缓解了数据库的IO压力，并且能够得到良好的用户体验。<br>&emsp;&emsp;技术点：<br>&emsp;&emsp;json、Thymeleaf</p>
</blockquote>
</li>
<li><p>购物车服务模块</p>
<blockquote>
<p>&emsp;&emsp;购物车服务是将用户想要购买的模玩先放入到一个“容器”里面，这个“容器”可以存放多个购物车数据，这里我采用redis+cookie作为这个“容器”。<br>具体思路是这样的，先根据模玩id封装好cart，然后把cart放到list里面，然后将这个list遍历，以产品id为key，json格式化过后的购物车为value放入map，再以含有userid信息的字符串为key，map为value存放在redis里面的hmset中。每次用户对购物车进行操作时，都会更新数据库中存放的购物车数据，再将购物车数据更新到redis中。<br><img src="https://guli-wjj.oss-cn-shenzhen.aliyuncs.com/project/%E8%B4%AD%E7%89%A9%E8%BD%A6%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B.png" alt="购物车业务流程"><br><img src="https://guli-wjj.oss-cn-shenzhen.aliyuncs.com/project/%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%90%88%E5%B9%B6%E8%B4%AD%E7%89%A9%E8%BD%A6%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B.png" alt="登录后合并购物车业务流程"><br>&emsp;&emsp;技术点：<br>&emsp;&emsp;redis、ActiveMq</p>
</blockquote>
</li>
<li><p>单点登录服务模块</p>
<blockquote>
<p>&emsp;&emsp;单点登录模块主要功能：当业务模块某个页面要检查当前用户是否登录时，提交到认证中心，认证中心进行检查校验，返回登录状态、用户Id和用户名称。<br>&emsp;&emsp;思路：passport只负责认证和token的颁发<br>&emsp;&emsp;1、用接受的用户名密码核对后台数据库<br>&emsp;&emsp;2、将用户信息加载到写入redis，redis中有该用户视为登录状态。<br>&emsp;&emsp;3、用userId+当前用户登录ip地址+密钥生成token<br>&emsp;&emsp;4、重定向用户到之前的来源地址，同时把token作为参数附上。<br>&emsp;&emsp;核对后台登录信息后，将用户登录信息载入缓存。<br><img src="https://guli-wjj.oss-cn-shenzhen.aliyuncs.com/project/%E8%AE%A4%E8%AF%81%E7%99%BB%E5%BD%95.png" alt="单点登录业务流程"><br>&emsp;&emsp;技术点：<br>&emsp;&emsp;SSO、JWT</p>
</blockquote>
</li>
<li><p>订单服务模块</p>
<blockquote>
<p>&emsp;&emsp;订单模块是需要用户登录以后才能访问的，所以每次用户点击“去结算”时，首先会去验证一下登录状态。如果验证通过了，那么将会获取到用户信息，如：收货地址、联系方式等。同时调用购物车服务获取要结算的商品信息并将这些信息封装成订单详情信息，这里要注意的是外部订单号，这个订单号是要与第三方支付平台对接的，所以要考虑到第三方支付平台的制定的标准。用户确认提交订单后，首先要验一下库存核对用户提交的商品信息与库存中的是否一致，如果库存验证成功则跳转到支付页面，验证失败返回失败信息。如果提交成功，利用消息队列对支付消息进行监听，如果用户已支付，则需要去更新订单信息，同时发出一个订单已支付的消息，便于其它模块（如：库存服务模块）进行消费。<br>&emsp;&emsp;为了防止用户重复提交订单，再提交订单之前，先在后台生成一个“tradeCode”，并放到前端页面，同时将“tradeCode”存放在redis中。当用户第一次提交订单时，先去获取页面传递的“tradeCode”，然后与redis中的“tradeCode”进行核对，如果一致，删除redis里面的“tradeCode”，并完成后面的订单提交业务。如果用户重复提交，此时redis里面已经没有“tradeCode”，将永远不会提交成功，并返回一个静态页面进行提示。<br>&emsp;&emsp;技术点：<br>&emsp;&emsp;ActiveMq</p>
</blockquote>
</li>
<li><p>支付服务模块</p>
<blockquote>
<p>&emsp;&emsp;支付模块调用的是第三方支付服务-支付宝，调用支付宝的API完成支付业务，支付成功后发送消息队列“支付成功”，以便订单模块进行消费。</p>
</blockquote>
</li>
<li><p>会员服务模块</p>
<blockquote>
<p>&emsp;&emsp;对会员的CRUD操作。</p>
</blockquote>
</li>
<li><p>common模块</p>
<blockquote>
<p>&emsp;&emsp;统一管理项目用到的工具类</p>
</blockquote>
</li>
</ul>
<h2 id="项目开源链接"><a href="#项目开源链接" class="headerlink" title="项目开源链接"></a>项目开源链接</h2><blockquote>
<p><a href="https://github.com/zh-WangJunjie/ACMall.git" target="_blank" rel="noopener">简化开源版本</a>仅供交流学习</p>
</blockquote>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>Java分布式架构项目</tag>
      </tags>
  </entry>
  <entry>
    <title>测试</title>
    <url>/2017/12/03/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- 
layout        布局    
title        标题                    文章的文件名
date        建立日期                文件建立日期
updated        更新日期                文件更新日期
comments    开启文章的评论功能         true
tags        标签（不适用于分页）    
categories    分类（不适用于分页）    
permalink    覆盖文章网址    
keywords    仅用于 meta 标签和 Open Graph 的关键词（不推荐使用）

分类：
categories:
- [Diary, PlayStation]
- [Diary, Games]
- [Life]

-->

<h1 id="指定语言"><a href="#指定语言" class="headerlink" title="指定语言"></a>指定语言</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</span><br></pre></td></tr></table></figure>

<h1 id="附加说明"><a href="#附加说明" class="headerlink" title="附加说明"></a>附加说明</h1><figure class="highlight plain"><figcaption><span>Array.map</span></figcaption><table><tr><td class="code"><pre><span class="line">array.map(callback[, thisArg])</span><br></pre></td></tr></table></figure>


<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"welcome"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h1><img src="/images/%E5%AE%87%E8%88%AA%E5%91%98.png" class="[宇航员.png]" title="[50] [50] " alt="title text">


<!-- 
    <div id="aplayer-bJJnoFAR" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="4886684792" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#FF4081"
    ></div> -->]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
